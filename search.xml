<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot</title>
      <link href="/2020/04/07/springboot/"/>
      <url>/2020/04/07/springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>jdk：jdk1.8</li><li>maven：Apache Maven3.6.3</li><li>Idea：2019</li><li>SpringBoot1.5.9</li></ul><h2 id="Maven设置"><a href="#Maven设置" class="headerlink" title="Maven设置"></a>Maven设置</h2><p>profile标签，告诉maven用jdk1.8编译</p><h2 id="IDEA设置"><a href="#IDEA设置" class="headerlink" title="IDEA设置"></a>IDEA设置</h2><p>idea中配成自己下载的maven</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>浏览器发送一个hello请求，服务器接收请求并处理，响应HelloWorld字符串</p><h3 id="1-创建一个maven工程"><a href="#1-创建一个maven工程" class="headerlink" title="1.创建一个maven工程"></a>1.创建一个maven工程</h3><h3 id="2-导入springboot相关的依赖"><a href="#2-导入springboot相关的依赖" class="headerlink" title="2.导入springboot相关的依赖"></a>2.导入springboot相关的依赖</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器整合</title>
      <link href="/2020/04/07/java-rong-qi-te-xing/"/>
      <url>/2020/04/07/java-rong-qi-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Java容器简介"><a href="#一-Java容器简介" class="headerlink" title="一.Java容器简介"></a>一.Java容器简介</h2><h3 id="0-数组和容器的区别"><a href="#0-数组和容器的区别" class="headerlink" title="0.数组和容器的区别"></a>0.数组和容器的区别</h3><ul><li>1.存储的大小是否固定<ul><li>数组的长度固定</li><li>容器的长度可变</li></ul></li><li>2.数据类型<ul><li>数组可以存储基本类型，也可以存储引用类型</li><li>容器只能存储引用类型，基本数据类型需要转换成对应的保证类才能存储到容器类中</li></ul></li></ul><h3 id="1-泛型"><a href="#1-泛型" class="headerlink" title="1.泛型"></a>1.泛型</h3><h3 id="2-两组接口"><a href="#2-两组接口" class="headerlink" title="2.两组接口"></a>2.两组接口</h3><h4 id="1-Iterator和Iterator接口"><a href="#1-Iterator和Iterator接口" class="headerlink" title="1.Iterator和Iterator接口"></a>1.Iterator和Iterator接口</h4><ul><li><p>Iterator接口定义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"remove"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>两个接口目的都在于遍历容器内的元素</li><li>Iterator中有三个方法<ul><li>next()</li><li>hasnext()</li><li>remove()</li></ul></li></ul></li><li><p>Iterable接口定义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> Spliterator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Spliterators<span class="token punctuation">.</span><span class="token function">spliteratorUnknownSize</span><span class="token punctuation">(</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Collection接口扩展了了Iterable接口，有Iterator()这个方法</li><li>迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而又无需暴露该对象的内部表示</li></ul></li></ul><h4 id="2-Comparable和Compartor接口"><a href="#2-Comparable和Compartor接口" class="headerlink" title="2.Comparable和Compartor接口"></a>2.Comparable和Compartor接口</h4><h3 id="3-fail-fast机制"><a href="#3-fail-fast机制" class="headerlink" title="3.fail-fast机制"></a>3.fail-fast机制</h3><blockquote><p>ArrayList, HashMap, TreeSet都有fail-fast机制。</p><p>fail-fast机制（快速失败）是集合容器的<strong><em>错误检测机制</em></strong>。当多个线程对容器进行结构上的改变时，<strong><em>可能</em></strong>（并非一定）会引发fail-fast机制，报ConcurrentModificationException异常。</p><p>结构上的改变：对容器元素进行修改不算，add或delete（增加或删除元素）算结构上的改变</p></blockquote><h4 id="1-fail-fast机制的例子"><a href="#1-fail-fast机制的例子" class="headerlink" title="1.fail-fast机制的例子"></a>1.fail-fast机制的例子</h4><blockquote><p>A线程遍历容器元素，B线程遍历删除指定元素</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailFastDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThreadB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//线程A：迭代遍历容器所有元素</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThreadA访问元素："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//线程B：遍历删除指定范围内的所有偶数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadB</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThreadB删除元素："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上例子会引发fail-fast，会抛出 <code>java.util.ConcurrentModificationException</code> 异常。</p><h4 id="2-产生原因"><a href="#2-产生原因" class="headerlink" title="2.产生原因"></a>2.产生原因</h4><p>当程序对容器元素进行迭代时，某个线程对对容器结构进行了修改，就可能会抛出 <code>java.util.ConcurrentModificationException</code> 异常，从而产生fail-fast机制。</p><p>当方法检测到对象的并发修改，同时不允许进行这种修改，就会抛出<code>ConcurrentModificationException</code>异常。同时需要注意的是，<strong>该异常不会始终指出对象已经由不同线程并发修改</strong>，如果单线程违反了规则，同样也有可能会抛出改异常。</p><p>因此，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常，所以因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。在迭代求的源码中可以看到：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cursor <span class="token operator">!=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/** 省略此处代码 */</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/** 省略此处代码 */</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>迭代器在调用next()、remove()方法时都是调用checkForComodification()方法，该方法主要就是检测modCount == expectedModCount ? 若不等则抛出ConcurrentModificationException 异常，从而产生fail-fast机制。所以要弄清楚为什么会产生fail-fast机制我们就必须要用弄明白为什么modCount != expectedModCount ，他们的值在什么时候发生改变的。</p><p>modCount在AbstractList 中定义的，为全局变量，会变是就是modCount。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>那么什么时候modCount会发生变化，下面看ArrayList的源码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E paramE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 省略此处代码 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">==</span> EMPTY_ELEMENTDATA<span class="token punctuation">)</span>            paramInt <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> paramInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>paramInt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改modCount</span>        <span class="token comment" spellcheck="true">/** 省略此处代码 */</span>    <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object paramObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramObject <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>paramObject<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//修改modCount</span>        <span class="token comment" spellcheck="true">/** 省略此处代码 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改modCount</span>        <span class="token comment" spellcheck="true">/** 省略此处代码 */</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，ArrayList中无论add、remove、clear方法只要是涉及了改变ArrayList<strong><em>元素的个数</em></strong>的方法都会导致modCount的改变。</p><p>总结出fail-fast产生的根本原因：<strong><em>expectedModCount 的值与modCount的改变不同步，导致两者之间不等从而产生fail-fast机制。</em></strong></p><p>回到上述的例子中，有两个线程（线程A，线程B）。其中线程A负责遍历list、线程B修改list。线程A在遍历list过程的某个时候（此时expectedModCount = modCount=N），线程启动，同时线程B减少一个元素，这时modCount的值发生改变（modCount - 1 = N - 1）。线程A继续遍历执行next方法时，通过checkForComodification方法发现expectedModCount  = N  ，而modCount = N - 1，两者不等，这时就抛出ConcurrentModificationException 异常，从而产生fail-fast机制。</p><h4 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3.解决方法</h4><ul><li>在遍历过程中所有涉及到改变容器个数的地方全部加上 <code>synchronized</code> 或者直接使用 <code>Collections.synchronizedXXX</code> 容器，这样就可以解决。但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作，影响吞吐。</li><li>使用并发容器<code>CopyOnWriterArrayList</code></li></ul><h2 id="二、List容器"><a href="#二、List容器" class="headerlink" title="二、List容器"></a>二、List容器</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>List是一个接口，继承自Collection接口。</p><p>AbstractList是一个抽象类，继承自AbstractCollection接口。</p><h4 id="1-ArrayList和LinkedList"><a href="#1-ArrayList和LinkedList" class="headerlink" title="1.ArrayList和LinkedList"></a>1.ArrayList和LinkedList</h4><blockquote><p>ArrayList和LinkedList是List最常用的两种实现</p></blockquote><ul><li>1.ArrayList基于数组实现，存在容量限制。当元素自动超过最大容量时，会自动扩容。LinkedList基于双向链表实现，不存在容量限制。</li><li>2.ArrayList由于基于数组实现，因此随机访问速度较快，随机插入和删除速度较慢。LinkedList随机插入和删除速度较快，随机访问速度较慢。</li><li>3.ArrayList和LinkdList都不是线程安全的。</li></ul><h4 id="2-Vector和Stack"><a href="#2-Vector和Stack" class="headerlink" title="2.Vector和Stack"></a>2.Vector和Stack</h4><blockquote><p>Vector和Stack的设计目标是作为线程安全的List实现，作为替代ArrayList</p></blockquote><ul><li>1.Vector和ArrayList类似，也实现了List接口。但是，Vector中的主要方法都是Synchronized方法，即通过互斥同步方式保证线程安全。</li><li>2.Stack也是一个同步容器。也使用了synchronized进行同步，实际上是继承自Vector类。</li></ul><h3 id="2-ArrayList"><a href="#2-ArrayList" class="headerlink" title="2.ArrayList"></a>2.ArrayList</h3><h4 id="1-要点"><a href="#1-要点" class="headerlink" title="1.要点"></a>1.要点</h4><p>ArrayList是一个数组队列，相当于一个动态数组。<strong><em>默认初始容量为10，添加元素时，如果发现容量已满，会自动扩容为原始大小的1.5倍。</em></strong>因此，尽量在初始化ArrayList时，为其指定合适的初始容量大小，减少扩容操作导致的性能开销。</p><p>ArrayList定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre><p>可以看出几个基本特性：</p><ul><li>ArrayList实现了List接口，并集成了AbstractList，它支持所有List操作。</li><li>ArrayList实现了RandomAccess接口，<strong>支持随机访问。</strong> RandomAccess是Java中用来倍List实现，为List提供快速访问功能的。ArrayList中我们通过index快速获取元素对象，这就是快速随机访问。</li><li>ArrayList实现了Cloneable接口，支持<strong>深拷贝。</strong></li><li>ArrayList实现了Serializable接口，能通过序列化方式传输。</li><li>ArrayList<strong>不是线程安全的。</strong></li></ul><h4 id="2-ArrayList数据结构"><a href="#2-ArrayList数据结构" class="headerlink" title="2.ArrayList数据结构"></a>2.ArrayList数据结构</h4><p>ArrayList包含了两个重要元素，分别是elementData和size</p><pre class=" language-java"><code class="language-java"><span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span></code></pre><ul><li>size是动态数组的实际大小。默认初始容量大小为10（可以在构造方法中指定初始大小）。</li><li>elementData是一个Object数组，用于保存添加到ArrayList中的元素。</li></ul><h4 id="3-ArrayList的序列化"><a href="#3-ArrayList的序列化" class="headerlink" title="3.ArrayList的序列化"></a>3.ArrayList的序列化</h4><h4 id="4-ArrayList访问元素"><a href="#4-ArrayList访问元素" class="headerlink" title="4.ArrayList访问元素"></a>4.ArrayList访问元素</h4><p>ArrayList访问元素基于以下关键性源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取第 index 个元素</span><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>E <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现非常简单，<strong>通过数组下标快速得到元素，时间复杂度为o(1)</strong></p><h4 id="5-ArrayList添加元素"><a href="#5-ArrayList添加元素" class="headerlink" title="5.ArrayList添加元素"></a>5.ArrayList添加元素</h4><p>ArrayList添加元素，若发现容量已满，<strong>*自动扩容1.5倍。</strong>见以下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minCapacity <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// overflow-conscious code</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>    elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ArrayList执行元素添加(add)操作时，调用ensureCapacityInternal()方法来保证容量足够。</p><ul><li>如果容量足够，将数组作为数组中size+1位置中元素写入，自增1。</li><li>如果容量不够，需要使用grow()方法进行扩容。新容量的大小为<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code>，也就是原容量的1.5倍。扩容操作实际上是调用了<code>Arrays.copyOf</code><strong><em>将原数组拷贝为一个新数组</em></strong>，因此最好在创建ArrayList对象时就指定大概的容量大小，减少扩容操作的次数。</li></ul><h4 id="6-ArrayList删除元素"><a href="#6-ArrayList删除元素" class="headerlink" title="6.ArrayList删除元素"></a>6.ArrayList删除元素</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ArrayList删除元素，实际上是调用<code>System.arraycopy()</code>将index后面的元素都复制到index位置上，因此复制的代价很高。</p><h4 id="7-ArrayList的fail-fast"><a href="#7-ArrayList的fail-fast" class="headerlink" title="7.ArrayList的fail-fast"></a>7.ArrayList的fail-fast</h4><p><code>modCount</code>用来记录ArrayList结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅设置元素的值不算结构发生改变。</p><p>在进行序列化或者迭代操作时，需要比较操作前后的<code>modCount</code>是否发生改变，如果改变则需抛出<code>ConcurrentModificationException</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream s<span class="token punctuation">)</span>    <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Write out element count, and any hidden stuff</span>    <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Write out size as capacity for behavioural compatibility with clone()</span>    s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Write out all elements in the proper order.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-LinkedList"><a href="#3-LinkedList" class="headerlink" title="3.LinkedList"></a>3.LinkedList</h3><blockquote><p>基于数据结构角度，视为双链表</p></blockquote><h4 id="1-要点-1"><a href="#1-要点-1" class="headerlink" title="1.要点"></a>1.要点</h4><p>LinkedList基于双链表实现。因此，顺序访问会非常高效，而随机访问效率较低。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Deque<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre><p>基本特性：</p><ul><li>LinkedList实现了List接口，并继承了AbstractSequentialList，支持List的所有操作。</li><li>LinkedList实现了Deque接口，也可以被当作队列（Queue）或双端队列（Deque）进行操作，此外，也可以用来实现栈。</li><li>LinkedList实现了Cloneable接口，支持<strong>深拷贝。</strong></li><li>LinkedList实现了Serializable接口，支持<strong>序列化。</strong></li><li>LinkedList<strong>不是线程安全的。</strong></li></ul><h4 id="2-LinkedList数据结构"><a href="#2-LinkedList数据结构" class="headerlink" title="2.LinkedList数据结构"></a>2.LinkedList数据结构</h4><p>LinkedList内部维护了一个双链表，通过Node类型的头尾指针（first和last）来访问数据。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链表长度</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表头节点</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表尾节点</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span></code></pre><ul><li>size：双链表中节点的个数，初始为0</li><li>first和last：分别是双链表的头结点和尾节点</li></ul><p>Node是LinkedList的内部类，他表示链表中的元素实例，Node中包含三个元素：</p><ul><li><code>prev</code> 是该节点的上一个节点；</li><li><code>next</code> 是该节点的下一个节点；</li><li><code>item</code> 是该节点所包含的值。</li></ul><h4 id="3-LinkedList序列化"><a href="#3-LinkedList序列化" class="headerlink" title="3.LinkedList序列化"></a>3.LinkedList序列化</h4><h4 id="4-LinkedList访问元素"><a href="#4-LinkedList访问元素" class="headerlink" title="4.LinkedList访问元素"></a>4.LinkedList访问元素</h4><p>LinkedList访问元素关键代码为：</p><pre class=" language-java"><code class="language-java">Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert isElementIndex(index);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>判断index在链表的前半部分还是后半部分</li><li>如果是前半部分，则从头结点开始找；如果是后半部分，则从尾节点开始找</li></ul><p>显然，LinkedList这种顺序访问元素的方式效率不如ArrayList随机访问元素。</p><h4 id="5-LinkedList添加元素"><a href="#5-LinkedList添加元素" class="headerlink" title="5.LinkedList添加元素"></a>5.LinkedList添加元素</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-LinkedList删除元素"><a href="#6-LinkedList删除元素" class="headerlink" title="6.LinkedList删除元素"></a>6.LinkedList删除元素</h4><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Java容器 </tag>
            
            <tag> fail-fast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式核心设计--缓存与锁</title>
      <link href="/2020/04/05/fen-bu-shi-he-xin-she-ji-huan-cun-yu-suo/"/>
      <url>/2020/04/05/fen-bu-shi-he-xin-she-ji-huan-cun-yu-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>大数据、人工智能、区块链、边缘计算、微服务 –&gt; 分布式</p><p>分布式：拆</p><p>微服务&amp;分布式</p><p>分布式：拆了就行</p><p>微服务：纵向拆分（根据业务逻辑拆分，电商：用户、支付、购物…）、属于最小化拆分</p><h2 id="2-CAP理论"><a href="#2-CAP理论" class="headerlink" title="2.CAP理论"></a>2.CAP理论</h2><p>任何一个分布式系统都必须重点考虑的原则。</p><p>C：一致性（强一致性）：所有子节点中的数据时刻保持一致</p><p>A：可用性：<strong><em>整体可用</em></strong>，不要失败就行</p><p>P：分区容错性：<strong><em>允许部分失败</em></strong></p><p>CAP理论：在任何分布式系统中，CAP三者不可能共存，只能存在两个</p><p>基础知识：一般而言，至少要保证<strong><em>P可行</em></strong>，因为分布式经常会出现弱网环境，因此就需要在C和A之间二选一。</p><h2 id="3-BASE理论"><a href="#3-BASE理论" class="headerlink" title="3.BASE理论"></a>3.BASE理论</h2><p>为了弥补CAP的不足。</p><p>尽最大努力近似的实现CAP三者。</p><ul><li><p>强一致性：时时刻刻一致、短时间内一致</p></li><li><p>最终一致性：只要最后一致即可</p></li></ul><p><strong><em>BASE理论</em></strong>：首先满足A和P，因此不能满足C，但是可以用最终一致性来代替C（时刻一致性）。核心思想是用最终一致性来代替强一致性</p><p>BASE：Basically Available 基本可用</p><ul><li><p>软状态（顾名思义）：多个节点时，允许中间某个时刻数据不一致</p></li><li><p>最终一致性</p></li></ul><h2 id="4-分布式缓存"><a href="#4-分布式缓存" class="headerlink" title="4.分布式缓存"></a>4.分布式缓存</h2><p>缓存问题</p><p>秒杀系统开始之前提前缓存，缓解大量数据请求对数据库压力。</p><ul><li><strong>缓存击穿</strong>：某一个<strong><em>热点数据</em></strong>过期（iPhone12），造成大量用户请求直奔DB的现象。<ul><li>解决1：监控线程（不推荐）：给热点数据加个监控线程，在快过期时更新。缺点：消耗资源，增加成本</li><li>解决2：提前设置好时间，保证热点数据在高峰期不过期</li></ul></li><li><strong>缓存雪崩</strong>：<strong><em>大量缓存全部失效</em></strong>（1.给大量缓存设置了相同的过期时间 ，如for() setExpires( 6h)，2.服务器故障)<ul><li>解决1：合理分配缓存的过期时间，不要设置成一样的过期时间，使得缓存的过期时间不一致</li><li>解决2：搭建缓存集群</li></ul></li><li><strong>缓存穿透</strong>：<strong><em>防止恶意攻击</em></strong>。一般而言，不会缓存一些无意义的数据。因为只对热点数据进行缓存处理，但是如果恶意攻击就可以利用无用数据反复发起请求，绕过缓存对DB产生压力。<ul><li>解决：将无意义的数据也进行缓存，并且将过期时间设置的相对短一些。</li><li>通用方案：以上的本质都是“缓存失效”，通用解决方案：二级缓存（分布式缓存）。一般而言，本地缓存是一级缓存，分布式缓存是二级缓存。</li></ul></li></ul><h2 id="5-一致性hash"><a href="#5-一致性hash" class="headerlink" title="5.一致性hash"></a>5.一致性hash</h2><p>hash算法：映射</p><p>字符串、图片、对象 -&gt; 数字</p><p>hash(a.png) -&gt; 123</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 缓存与锁 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>告别if/else</title>
      <link href="/2020/04/04/gao-bie-if-else/"/>
      <url>/2020/04/04/gao-bie-if-else/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>最近看了codesheep的博客，这是b站上我最喜欢的一个编程up主。提到了if/else的几种替代方法，正好前阵子看了《设计模式之禅》，今天来做个总结。</p><p>一个场景：一个后台管理系统有三种角色：</p><ul><li>ROOT_ADMIN：有权限A</li><li>ORDER_ADMIN：有权限B</li><li>NORMAL：有权限C</li></ul><h2 id="2-if-else"><a href="#2-if-else" class="headerlink" title="2.if/else"></a>2.if/else</h2><blockquote><p>首先用到if/else，一个用户进来判断有什么行为。那么，骚操作来了…</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JudgeRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> String <span class="token function">judge</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>    String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>roleName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ROOT_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token string">"ROOT_ADMIN: "</span><span class="token operator">+</span><span class="token string">"has permission A"</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>roleName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ORDER_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token string">"ORDER_ADMIN: "</span><span class="token operator">+</span><span class="token string">"has permision B"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>roleName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"NORMAL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token string">"NORMAL"</span><span class="token operator">+</span><span class="token string">"has permission C"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>存在两个问题：</p><ul><li>1.代码非常不优雅。。。。</li><li>2.扩展性很差，代码冗余</li></ul><h2 id="3-枚举类"><a href="#3-枚举类" class="headerlink" title="3.枚举类"></a>3.枚举类</h2><blockquote><p>既然有一对一的对应关系，那么自然可以用到枚举，首先要定义一个公共接口<code>RoleOperation</code>，表示不同角色能做自己的事。</p></blockquote><p>公共接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RoleOperation</span><span class="token punctuation">{</span>  String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//表示某个角色可以做op操作</span><span class="token punctuation">}</span></code></pre><p>接下来需要定义一个有不同角色的枚举类，每个角色重写op方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RoleEnum <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//系统管理员</span>    ROOT_ADMIN <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ROOT_ADMIN:"</span> <span class="token operator">+</span> <span class="token string">"has permission A"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//订单管理员</span>    ORDER_ADMIN <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ORDER_ADMIN:"</span> <span class="token operator">+</span> <span class="token string">"has permission B"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//普通用户</span>    NORMAL <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"NORMAL:"</span> <span class="token operator">+</span> <span class="token string">"has permission C"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>主函数入口调用，一行代码即可</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JudgeRole</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> String <span class="token function">judge</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> roleEnum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以后再要增加其他用户的操作权限，只需要去枚举类进行添加即可，方便快捷！</p><h2 id="4-工厂模式"><a href="#4-工厂模式" class="headerlink" title="4.工厂模式"></a>4.工厂模式</h2><blockquote><p>工厂模式的思想：首先针对业务的不同，分别编写各自的业务类，再用工厂类聚合各个业务类。</p></blockquote><p>首先编写三个业务类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootAdminRole</span> <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RootAdminRole</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleName <span class="token operator">+</span> <span class="token string">"has permission A"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderAdminRole</span> <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderAdminRole</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleName <span class="token operator">+</span> <span class="token string">"has permission B"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalRole</span> <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NormalRole</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleName <span class="token operator">+</span> <span class="token string">"has permission C"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写工厂类：工厂类生产有权限的角色对象，对象行为被公共接口定义</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> RoleOperation<span class="token operator">></span> roleOperationMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态块，初始化工作最先执行</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        roleOperationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ROOT_ADMIN"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RootAdminRole</span><span class="token punctuation">(</span><span class="token string">"ROOT_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roleOperationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ORDER_ADMIN"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OrderAdminRole</span><span class="token punctuation">(</span><span class="token string">"ORDER_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roleOperationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"NORMAL"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NormalRole</span><span class="token punctuation">(</span><span class="token string">"NORMAL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RoleOperation <span class="token function">getOp</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleOperationMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>简单调用：一行代码即可。先得到角色对象，再执行op()行为</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">judge</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        return RoleEnum.valueOf(roleName).op();</span>        <span class="token keyword">return</span> RoleFactory<span class="token punctuation">.</span><span class="token function">getOp</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这样的话以后想扩展条件也很容易，只需要增加新代码，而不需要动以前的业务代码，非常符合“开闭原则”。</p><h2 id="5-策略模式"><a href="#5-策略模式" class="headerlink" title="5.策略模式"></a>5.策略模式</h2><blockquote><p>Define a family of alogorithms, encapsulate each one, and make them interchangeable.（定义一组算法，将每个算法都封装起来，并且使他们之间可以互换。）</p></blockquote><p>本场景同样可以用到策略模式。创建一个RoleContext类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleContext</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传入不同的策略对象，执行不同的业务</span>    <span class="token keyword">private</span> RoleOperation roleOperation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RoleContext</span><span class="token punctuation">(</span>RoleOperation roleOperation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleOperation <span class="token operator">=</span> roleOperation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleOperation<span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>传入roleOperation对象</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">judge</span><span class="token punctuation">(</span>RoleOperation roleOperation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RoleContext roleContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleContext</span><span class="token punctuation">(</span>roleOperation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> roleContext<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>执行业务代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        System.out.println(judge("ROLE_NORMAL"));</span>        JudgeRole judgeRole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JudgeRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result1 <span class="token operator">=</span> judgeRole<span class="token punctuation">.</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RootAdminRole</span><span class="token punctuation">(</span><span class="token string">"ROLE_ROOT_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String result2 <span class="token operator">=</span> judgeRole<span class="token punctuation">.</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderAdminRole</span><span class="token punctuation">(</span><span class="token string">"ROLE_ORDER_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String result3 <span class="token operator">=</span> judgeRole<span class="token punctuation">.</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NormalRole</span><span class="token punctuation">(</span><span class="token string">"ROLE_NORMAL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>其实仔细思考业务逻辑，发现有很多种方法可以替代if/else。。。。重要的还是思想，在这里还是得提高设计模式的知识，最近也一直在啃《设计模式之禅》这本书，感觉这本书娓娓道来，例子也很合适，希望可以一直坚持下去，写出更漂亮简介的Java代码！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源框架总结</title>
      <link href="/2020/04/04/kai-yuan-kuang-jia-zong-jie/"/>
      <url>/2020/04/04/kai-yuan-kuang-jia-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Mybatis"><a href="#一、Mybatis" class="headerlink" title="一、Mybatis"></a>一、Mybatis</h2><h3 id="1-Mybatis重要组件"><a href="#1-Mybatis重要组件" class="headerlink" title="1.Mybatis重要组件"></a>1.Mybatis重要组件</h3><ul><li><p>Mapper配置：实体类Student.java-数据表student，XML或注解</p><ul><li><strong><em>Mybatis一般推荐XML</em></strong></li></ul></li><li><p>Mapper接口：DAO层接口（只需要写接口，不用写实现类：需要遵循约定）</p><ul><li>约定1：方法名必须和SQL配置文件（studentMapper.xml）中的id值相同</li><li>约定2：方法的输入参数：必须和sql配置文件的parameterType的类型相同</li><li>约定3：方法的返回值：必须和sql配置文件的resultType的类型相同</li></ul><p>SQL配置文件</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"queryStudentByNo"</span>  parameterType<span class="token operator">=</span><span class="token string">"int"</span> resultType<span class="token operator">=</span><span class="token string">"yc.entity.student"</span><span class="token operator">></span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> stdNo <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{stuNo}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span></code></pre><p>根据约定编写接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> Student <span class="token function">queryStudentByNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> stuNo<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">queryStudentByNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>特殊情况：</p><ul><li>1.如果不存在parameterType，则代表是一个无参方法</li><li>2.如果不存在resultType，则代表是返回值是void</li><li>3.如果方法的返回值是一个集合类型，则实际的resultType仍然是元素类型，而不是集合类型</li></ul></li></ul><h3 id="2-Mybatis开发时的常用对象"><a href="#2-Mybatis开发时的常用对象" class="headerlink" title="2.Mybatis开发时的常用对象"></a>2.Mybatis开发时的常用对象</h3><ul><li><p>1.SqlSessionFactory：SqlSession工厂。通过SqlSessionFactory中的openSession()方法产生SqlSession</p></li><li><p>2.SqlSession：SqlSession对象（类似于JDBC中的Connection）</p></li><li><p>3.Executor：Mybatis中所有Mapper语句的执行，都是通过Excutor进行的</p></li></ul><h3 id="3-Mybatis四大核心对象"><a href="#3-Mybatis四大核心对象" class="headerlink" title="3.Mybatis四大核心对象"></a>3.Mybatis四大核心对象</h3><ul><li>1.StatementHandler：数据库的处理对象，负责SQL语句 select … from where id = #{}…</li><li>2.ParameterHandler：处理SQL中参数对象，负责SQL中的参数</li><li>3.Executor</li><li>4.ResultSetHandler：处理SQL的返回结果集</li></ul><h3 id="4-Mybatis四大处理器"><a href="#4-Mybatis四大处理器" class="headerlink" title="4.Mybatis四大处理器"></a>4.Mybatis四大处理器</h3><ul><li><p>1.StatementHandler</p></li><li><p>2.ParameterHandler</p></li><li><p>3.ResultSetHandler</p></li><li><p>4.TypeHandler（类型转换器）</p><p><u><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhw96mioxj30xo0dwdhi.jpg" alt=""></u></p></li></ul><h3 id="5-Mybatis执行流程"><a href="#5-Mybatis执行流程" class="headerlink" title="5.Mybatis执行流程"></a>5.Mybatis执行流程</h3><p>​    <u><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhwalsbsij30xc0gsdm0.jpg" alt=""></u></p><h3 id="6-一对一、一对多、延迟加载"><a href="#6-一对一、一对多、延迟加载" class="headerlink" title="6.一对一、一对多、延迟加载"></a>6.一对一、一对多、延迟加载</h3><ul><li><p>一对一</p><pre class=" language-java"><code class="language-java">使用<span class="token operator">&lt;</span>resultMap<span class="token operator">></span>中的<span class="token operator">&lt;</span>association<span class="token operator">></span>一对一的延迟加载：使用<span class="token operator">&lt;</span>resultMap<span class="token operator">></span>中的<span class="token operator">&lt;</span>association<span class="token operator">></span>的select属性指定延迟加载的SQL语句<span class="token operator">&lt;</span>resultMap<span class="token operator">></span>          <span class="token operator">&lt;</span>association select<span class="token operator">=</span><span class="token string">"延迟加载的SQL语句"</span><span class="token operator">></span>          <span class="token operator">&lt;&lt;</span>association<span class="token operator">>></span><span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>  </code></pre></li></ul><ul><li>一对多：将一对一中的<association>改为<collection></collection></association></li></ul><h2 id="二、Spring"><a href="#二、Spring" class="headerlink" title="二、Spring"></a>二、Spring</h2><h3 id="1-IOC和AOP"><a href="#1-IOC和AOP" class="headerlink" title="1.IOC和AOP"></a>1.IOC和AOP</h3><ul><li><p>IOC/DI：控制反转/依赖注入    </p><blockquote><p>目的：解耦合</p></blockquote><p>Student student = new Student() 使用new会造成耦合度较高，如何解决？</p><ul><li>工厂模式：类 -&gt; new -&gt; 对象 变成 <strong><em>类 -&gt; 工厂模式 -&gt; 对象</em></strong>  问题：需要自己编写工厂 </li><li>IOC：IOC提供了一个工厂<ul><li>1.往工厂中注入对象（配置xml或注解）</li><li>2.从工厂中获取对象</li></ul></li><li>总结：IOC可以通过配置的方式来创建对象</li></ul></li><li><p>AOP：面向方面（切面）编程</p><blockquote><p>OOP的补充，不是替代</p></blockquote><p>面向对象的不足？</p><p><u><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhwb1w8xhj30ya0jcn1l.jpg" alt=""></u></p><p>以上OOP两个不足，可以通过AOP进行改进：切点和切面，前置通知和后置通知</p><p><u><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhwbewvtsj30w80im0vp.jpg" alt=""></u></p><p>使用AOP的实际场景：</p><ul><li>日志：删除</li><li>安全统一校验</li></ul></li></ul><h3 id="2-Spring中的设计模式"><a href="#2-Spring中的设计模式" class="headerlink" title="2.Spring中的设计模式"></a>2.Spring中的设计模式</h3><ul><li>工厂模式：创建bean、获取bean</li><li>单例模式/原型模式：创建bean时，设置作用域，singleton/prototype</li><li>监听模式：自定义时间发布，监听模式。如ApplicationListener，当某个<strong>动作触发</strong>时，就会自动执行一个通知</li><li>责任链模式：AOP</li><li>策略模式：创建代理</li></ul><h2 id="三、SpringMVC"><a href="#三、SpringMVC" class="headerlink" title="三、SpringMVC"></a>三、SpringMVC</h2><p>​    <img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhwbtub3sj312e0hy78u.jpg" alt=""></p><h2 id="四、Spring-Boot"><a href="#四、Spring-Boot" class="headerlink" title="四、Spring Boot"></a>四、Spring Boot</h2><blockquote><p>最主要的功能：自动装配</p><p>以前不用spring boot，需要自己配置框架的配置文件</p><p>spring，mabatis，ssm整合等情况，需要边和一大堆配置文件</p><p>如果使用Spring Boot，则可以省略配置。好处：将开发重点放在业务逻辑上，而不是配置上</p></blockquote><ul><li>自动装配的原理？约定优于配置（能约定就别配置）：将一些配置功能，前置到源码底层实现好</li><li>特点1：版本仲裁中心：以后引入依赖时，不用再写版本号。好处：1.不用记版本号 2.避免冲突</li><li>特点2：提供了很多starter（场景启动器）：批量jar。<ul><li>假设开发web项目：json.jar  tomcat.jar hibernate-validator.jar…  ==&gt; spring-boot-starter-web</li><li>以后使用web项目，只需要引入spring-boot-starter-web</li></ul></li><li>自动装配的应用时：@EnableAutoConfiguration 就是springboot提供自动装配的注解</li></ul><h2 id="五、Spring-Cloud"><a href="#五、Spring-Cloud" class="headerlink" title="五、Spring Cloud"></a>五、Spring Cloud</h2><blockquote><p>微服务治理框架，内置了许多组件</p></blockquote><ul><li>Eureka<ul><li>服务注册中，类似于</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arrayList底层</title>
      <link href="/2020/04/04/arraylist-di-ceng/"/>
      <url>/2020/04/04/arraylist-di-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-搭建idea源码调试环境"><a href="#1-搭建idea源码调试环境" class="headerlink" title="1.搭建idea源码调试环境"></a>1.搭建idea源码调试环境</h2><ul><li>1.新建project项目JavaSourceLearn，创建基础目录source和test<ul><li>source：防止Java源码</li><li>test：防止测试代码和测试入口：arrayList，hashMap等</li></ul></li><li>2.project structure下找到sdk，将source.zip文件解压到source目录</li><li>3.写个hashMap调试用例，<code>F7</code>进入单步调试，此时进不去内部源码，只在外层调试。进入<code>preference--&gt;debugger--&gt;stepping--&gt;Do not into classes去掉勾选</code>即可</li></ul><h2 id="2-put操作"><a href="#2-put操作" class="headerlink" title="2.put操作"></a>2.put操作</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> arrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea使用</title>
      <link href="/2020/04/04/idea-shi-yong/"/>
      <url>/2020/04/04/idea-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-添加类和方法注释"><a href="#1-添加类和方法注释" class="headerlink" title="1.添加类和方法注释"></a>1.添加类和方法注释</h2><ul><li><code>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates -&gt; Files</code> 修改class头文件</li></ul><h2 id="2-常用快捷键"><a href="#2-常用快捷键" class="headerlink" title="2.常用快捷键"></a>2.常用快捷键</h2><ul><li>1.进入preference设置 <code>command+,</code></li><li></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再谈hashcode和equals</title>
      <link href="/2020/04/04/zai-tan-hashcode-he-equals/"/>
      <url>/2020/04/04/zai-tan-hashcode-he-equals/</url>
      
        <content type="html"><![CDATA[<h2 id="1、hash表"><a href="#1、hash表" class="headerlink" title="1、hash表"></a>1、hash表</h2><h2 id="2、为什么要重写equals和hashcode-方法"><a href="#2、为什么要重写equals和hashcode-方法" class="headerlink" title="2、为什么要重写equals和hashcode()方法"></a>2、为什么要重写equals和hashcode()方法</h2><h2 id="3、注意点"><a href="#3、注意点" class="headerlink" title="3、注意点"></a>3、注意点</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 面试必备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建过程</title>
      <link href="/2020/04/04/da-jian-guo-cheng/"/>
      <url>/2020/04/04/da-jian-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul><li><code>hexo g</code>  初始化</li><li><code>hexo s</code>  上传至本地服务器</li><li><code>hexo d</code>  部署到个人网站</li></ul><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></li></ul><h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><ul><li><a href="https://ycfw.github.io" target="_blank" rel="noopener">https://ycfw.github.io</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
